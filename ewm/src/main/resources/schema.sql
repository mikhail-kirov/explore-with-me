DROP TABLE IF EXISTS users, categories, events, requests, compilations, events_compilations, locations;

CREATE TABLE users (
                         user_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                         email varchar(300) unique not null,
                         name varchar(300) not null,
                         country varchar(100)
);

CREATE TABLE categories
(
                        category_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        name varchar(100) unique not null
);
CREATE INDEX categories_name ON categories(name);

CREATE TABLE locations (
                           location_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                           name varchar (300) not null,
                           description text unique not null,
                           lat numeric not null,
                           lon numeric not null,
                           radius real,
                           owner bigint,
                           constraint locations_to_user foreign key (owner) references users(user_id)
);
CREATE INDEX locations_id ON locations(location_id);

CREATE TABLE events
(
                        event_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        annotation text not null,
                        description text not null,
                        paid boolean not null,
                        participant_limit integer not null,
                        request_moderation boolean not null,
                        state varchar,
                        title varchar not null,
                        created_on timestamp not null,
                        event_date timestamp not null,
                        published_on timestamp,
                        initiator bigint not null,
                        category bigint not null,
                        views bigint,
                        confirmed_requests bigint,
                        location bigint not null,
                        constraint events_to_category foreign key (category) references categories(category_id) on delete cascade,
                        constraint events_to_initiator foreign key (initiator) references users(user_id) on delete cascade,
                        constraint events_to_location foreign key (location) references locations(location_id) on delete cascade
);
CREATE INDEX events_initiator ON events(initiator);
CREATE INDEX events_category ON events(category);
CREATE INDEX events_state ON events(state);
CREATE INDEX events_location ON events(location);

CREATE TABLE requests (
                       request_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       event bigint not null,
                       requester bigint not null,
                       status varchar(50) not null,
                       created timestamp not null,
                       constraint requests_to_event foreign key (event) references events(event_id) on delete cascade,
                       constraint requests_to_user foreign key (requester) references users(user_id) on delete cascade
);
CREATE INDEX requests_requester ON requests(requester);
CREATE INDEX requests_event ON requests(event);

CREATE TABLE compilations (
                       compilations_id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                       title varchar(100) unique not null,
                       pinned boolean not null
);

CREATE TABLE events_compilations (
    compilations_id bigint,
    event_id        bigint,
    primary key (compilations_id, event_id),
    constraint events_compilations_to_compilations foreign key (compilations_id) references compilations (compilations_id) on delete cascade,
    constraint events_compilations_to_events foreign key (event_id) references events (event_id) on delete cascade
);

CREATE OR REPLACE FUNCTION distance(lat1 float, lon1 float, lat2 float, lon2 float)
    RETURNS float
AS
'
    declare
        dist float = 0;
        rad_lat1 float;
        rad_lat2 float;
        theta float;
        rad_theta float;
    BEGIN
        IF lat1 = lat2 AND lon1 = lon2
        THEN
            RETURN dist;
        ELSE
            -- переводим градусы широты в радианы
            rad_lat1 = pi() * lat1 / 180;
            -- переводим градусы долготы в радианы
            rad_lat2 = pi() * lat2 / 180;
            -- находим разность долгот
            theta = lon1 - lon2;
            -- переводим градусы в радианы
            rad_theta = pi() * theta / 180;
            -- находим длину ортодромии
            dist = sin(rad_lat1) * sin(rad_lat2) + cos(rad_lat1) * cos(rad_lat2) * cos(rad_theta);

            IF dist > 1
            THEN dist = 1;
            END IF;

            dist = acos(dist);
            -- переводим радианы в градусы
            dist = dist * 180 / pi();
            -- переводим градусы в километры
            dist = dist * 60 * 1.8524;

            RETURN dist;
        END IF;
    END;
'
    LANGUAGE PLPGSQL;


{
	"info": {
		"_postman_id": "0c86482c-5b30-4b41-8896-0cb66695ae54",
		"name": "Test Explore Wuth Me - Feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "32615785"
	},
	"item": [
		{
			"name": "Location",
			"item": [
				{
					"name": "Admin and Public",
					"item": [
						{
							"name": "Добавление новой локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        location = rnd.getLocation(56.356519, 44.064573, 10);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(location),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должена содержать поля: id, name, description, lat, lon, radius\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations"
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить локацию по ID Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const location = await api.addAdminLocation(rnd.getLocation(55.320682, 42.167941, 1));\r",
											"        pm.collectionVariables.set(\"response\", location)\r",
											"        pm.collectionVariables.set(\"locId\", location.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, name, description, lat, lon, radius\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(source.id).equal(target.id, 'Идентификатор локации должен соответствовать идентификатору в запросе');\r",
											"    pm.expect(source.name).equal(target.name, 'Название локации должно соответствовать названию локации с указанным идентификатором');\r",
											"    pm.expect(source.description).equal(target.description, 'Описание локации должно соответствовать описанию локации с указанным идентификатором');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/locations/:locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locId"
									],
									"variable": [
										{
											"key": "locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск ближайших зарегистрированных локаций",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        await api.addAdminLocation(rnd.getLocation(53.211748, 43.036660, 10));\r",
											"        await api.addAdminLocation(rnd.getLocation(53.104309, 43.329652, 30));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, name, description, lat, lon, radius\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/locations/near?lat=53.196596&lon=42.900614&rad=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										"near"
									],
									"query": [
										{
											"key": "lat",
											"value": "53.196596"
										},
										{
											"key": "lon",
											"value": "42.900614"
										},
										{
											"key": "rad",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Поиск локаций по имени или описанию",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        let location = await api.addAdminLocation(rnd.getLocation(47.772757, 44.514269, 5));\r",
											"        pm.request.removeQueryParams(['text']);\r",
											"        pm.request.addQueryParams([`text=` + location.name]);\r",
											"        pm.collectionVariables.set('response', location);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, name, description, lat, lon, radius\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"});\r",
											"\r",
											"pm.test(\"Должена быть найдена 1 локация\", function () {\r",
											"    pm.expect(pm.response.json().length).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(source.id).equal(target.id, 'ID должно соответствовать');\r",
											"    pm.expect(source.name).equal(target.name, 'Имя должно соответствовать');\r",
											"    pm.expect(source.description).equal(target.description, 'Описание должно соответствовать');\r",
											"    pm.expect(source.lat.toString()).equal(target.lat.toString(), 'Широта должна соответствовать');\r",
											"    pm.expect(source.lon.toString()).equal(target.lon.toString(), 'Долгота должна соответствовать');\r",
											"    pm.expect(source.radius.toString()).equal(target.radius.toString(), 'Радиус должен соответствовать');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/locations?text=0",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations"
									],
									"query": [
										{
											"key": "text",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка событий в выбранной локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUserRussia());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const location = await api.addAdminLocation(rnd.getLocation(53.407208, 58.980100, 1));\r",
											"        await api.addEvent(user.id, rnd.getEvent(category.id, location));\r",
											"        await api.addEvent(user.id, rnd.getEvent(category.id, location));\r",
											"        pm.collectionVariables.set('locId', location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target[0]).to.have.property('id');\r",
											"pm.expect(target[0]).to.have.property('title');\r",
											"pm.expect(target[0]).to.have.property('annotation');\r",
											"pm.expect(target[0]).to.have.property('category');\r",
											"pm.expect(target[0]).to.have.property('paid');\r",
											"pm.expect(target[0]).to.have.property('eventDate');\r",
											"pm.expect(target[0]).to.have.property('initiator');\r",
											"pm.expect(target[0]).to.have.property('description');\r",
											"pm.expect(target[0]).to.have.property('participantLimit');\r",
											"pm.expect(target[0]).to.have.property('state');\r",
											"pm.expect(target[0]).to.have.property('createdOn');\r",
											"pm.expect(target[0]).to.have.property('location');\r",
											"pm.expect(target[0]).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найдены 1 события\", function () {\r",
											"    pm.expect(target.length).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/locations/:locId/events",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										":locId",
										"events"
									],
									"variable": [
										{
											"key": "locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получение списка всех событий в заданных координатах и радиусу",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let event;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUserRussia());\r",
											"        const category = await api.addCategory(rnd.getCategory());\r",
											"        const location1 = await api.addAdminLocation(rnd.getLocation(56.127890, 44.077791, 1));\r",
											"        const location2 = await api.addAdminLocation(rnd.getLocation(56.144677, 44.345451, 1));\r",
											"        await api.addEvent(user.id, rnd.getEvent(category.id, location1));\r",
											"        await api.addEvent(user.id, rnd.getEvent(category.id, location2));\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(event),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Событие должно содержать поля: id, title, annotation, category, paid, eventDate, initiator, description, participantLimit, state, createdOn, location, requestModeration\", function () {\r",
											"pm.expect(target[0]).to.have.property('id');\r",
											"pm.expect(target[0]).to.have.property('title');\r",
											"pm.expect(target[0]).to.have.property('annotation');\r",
											"pm.expect(target[0]).to.have.property('category');\r",
											"pm.expect(target[0]).to.have.property('paid');\r",
											"pm.expect(target[0]).to.have.property('eventDate');\r",
											"pm.expect(target[0]).to.have.property('initiator');\r",
											"pm.expect(target[0]).to.have.property('description');\r",
											"pm.expect(target[0]).to.have.property('participantLimit');\r",
											"pm.expect(target[0]).to.have.property('state');\r",
											"pm.expect(target[0]).to.have.property('createdOn');\r",
											"pm.expect(target[0]).to.have.property('location');\r",
											"pm.expect(target[0]).to.have.property('requestModeration');\r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найдены 1 события\", function () {\r",
											"    pm.expect(target.length).to.eql(1);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/locations/events/near?lat=56.078590&lon=43.950994&rad=10",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"locations",
										"events",
										"near"
									],
									"query": [
										{
											"key": "lat",
											"value": "56.078590"
										},
										{
											"key": "lon",
											"value": "43.950994"
										},
										{
											"key": "rad",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location1;\r",
											"    try {\r",
											"        location1 = await api.addAdminLocation(rnd.getLocation(52.634702, 39.845603, 1));\r",
											"        location1.name = 'sdfvdfvsdf0';\r",
											"        location1.lat = '51.119369';\r",
											"        location1.lon = '40.725287';\r",
											"        pm.collectionVariables.set('response', location1);\r",
											"        pm.collectionVariables.set(\"locId\", location1.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"     pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(location1),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(source.id).equal(target.id, 'ID должно соответствовать');\r",
											"    pm.expect(source.name).equal(target.name, 'Имя должно соответствовать измененному');\r",
											"    pm.expect(source.lat.toString()).equal(target.lat.toString(), 'Широта должно соответствовать измененной');\r",
											"    pm.expect(source.lon.toString()).equal(target.lon.toString(), 'Долгота должна соответствовать измененной');\r",
											"    pm.expect(source.radius.toString()).equal(target.radius.toString(), 'Радиус должен соответствовать измененному');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/admin/locations/:locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locId"
									],
									"variable": [
										{
											"key": "locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление локации без событий",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const location = await api.addAdminLocation(rnd.getLocation(50.835401, 40.584477, 1));\r",
											"        pm.collectionVariables.set(\"response\", location)\r",
											"        pm.collectionVariables.set(\"locId\", location.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let source = pm.collectionVariables.get('response');\r",
											"\r",
											"pm.test(\"Локация должна быть найдена до удаления\", function () {\r",
											"    pm.expect(source).not.to.be.null;\r",
											"});\r",
											"\r",
											"let body\r",
											"const req = {\r",
											"                url: \"http://localhost:8080/admin/locations/all\",\r",
											"                method: \"GET\",\r",
											"                body: body == null ? \"\" : JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" },\r",
											"            };\r",
											"pm.sendRequest(req, (error, response) => {\r",
											"    pm.test(\"Локация должна быть удалена после выполнения запроса\", function(){\r",
											"        response.json().forEach(element => {\r",
											"            if(element.id == pm.collectionVariables.get('locId')){\r",
											"                throw new Error(\"Локация все еще находится в списке существующих\");\r",
											"            }\r",
											"        })\r",
											"    });\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/admin/locations/:locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"admin",
										"locations",
										":locId"
									],
									"variable": [
										{
											"key": "locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Private",
					"item": [
						{
							"name": "Добавление новой локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUserRussia());\r",
											"        location = rnd.getLocation(54.785419, 73.392685, 3);\r",
											"        pm.collectionVariables.set(\"response\", location)\r",
											"        pm.collectionVariables.set(\"userId\", user.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"    pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(location),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(201);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должена содержать поля: id, name, description, lat, lon, radius\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Accept",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/locations",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"locations"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Получить локацию по ID",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUserRussia());\r",
											"        const location = await api.addLocation(user.id, rnd.getLocation(54.721473, 72.715106, 2));\r",
											"        pm.collectionVariables.set(\"response\", location);\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        pm.collectionVariables.set(\"locId\", location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get('response');\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, name, description, lat, lon, radius\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"});\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(source.id).equal(target.id, 'Идентификатор локации должен соответствовать идентификатору в запросе');\r",
											"    pm.expect(source.name).equal(target.name, 'Название локации должно соответствовать названию локации с указанным идентификатором');\r",
											"    pm.expect(source.description).equal(target.description, 'Описание локации должно соответствовать описанию локации с указанным идентификатором');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/locations/:locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"locations",
										":locId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Изменение локации",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    let location;\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUserRussia());\r",
											"        location = await api.addLocation(user.id, rnd.getLocation(55.324716, 65.539595, 3));\r",
											"        location.name = \"sdfvdfvsdf0\";\r",
											"        location.lat = '55.357077';\r",
											"        location.lon = '65.459136';\r",
											"        pm.collectionVariables.set(\"response\", location);\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"        pm.collectionVariables.set(\"locId\", location.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"\r",
											"     pm.request.body.update({\r",
											"        mode: 'raw',\r",
											"        raw: JSON.stringify(location),\r",
											"        options: { raw: { language: 'json' } }\r",
											"    });\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const source = pm.collectionVariables.get(\"response\");\r",
											"const target = pm.response.json();\r",
											"\r",
											"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
											"    pm.expect(source.id).equal(target.id, 'ID должно соответствовать');\r",
											"    pm.expect(source.name).equal(target.name, 'Имя должно соответствовать измененному');\r",
											"    pm.expect(source.lat.toString()).equal(target.lat.toString(), 'Широта должно соответствовать измененной');\r",
											"    pm.expect(source.lon.toString()).equal(target.lon.toString(), 'Долгота должна соответствовать измененной');\r",
											"    pm.expect(source.radius.toString()).equal(target.radius.toString(), 'Радиус должен соответствовать измененному');\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{{request_body}}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/users/:userId/locations/:locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"locations",
										":locId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Вывод всех локаций пользователей",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUserRussia());\r",
											"        await api.addLocation(user.id, rnd.getLocation(55.471450, 65.087446, 2));\r",
											"        await api.addLocation(user.id, rnd.getLocation(55.437464, 64.956110, 1));\r",
											"        pm.collectionVariables.set(\"userId\", user.id);\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function () {\r",
											"    pm.response.to.have.status(200);   \r",
											"    pm.response.to.be.withBody;\r",
											"    pm.response.to.be.json;\r",
											"});\r",
											"\r",
											"const target = pm.response.json()[0];\r",
											"\r",
											"pm.test(\"Локация должна содержать поля: id, name, description, lat, lon, radius\", function () {\r",
											"pm.expect(target).to.have.property('id');\r",
											"pm.expect(target).to.have.property('name');\r",
											"pm.expect(target).to.have.property('description');\r",
											"pm.expect(target).to.have.property('lat');\r",
											"pm.expect(target).to.have.property('lon');\r",
											"pm.expect(target).to.have.property('radius');\r",
											"});\r",
											"\r",
											"pm.test(\"Должен быть найдены 2 локации\", function () {\r",
											"    pm.expect(pm.response.json().length).to.eql(2);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/locations/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"locations",
										"all"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Удаление локации без событий",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const main = async () => {\r",
											"    const api = new API(pm);\r",
											"    const rnd = new RandomUtils();\r",
											"\r",
											"    try {\r",
											"        const user = await api.addUser(rnd.getUserRussia());\r",
											"        const location = await api.addLocation(user.id, rnd.getLocation(55.424982, 64.420693, 2));\r",
											"        pm.collectionVariables.set(\"locId\", location.id)\r",
											"    } catch(err) {\r",
											"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
											"    }\r",
											"};\r",
											"\r",
											"const interval = setInterval(() => {}, 1000);\r",
											"\r",
											"setTimeout(async () => \r",
											"    {\r",
											"        try {\r",
											"            await main();\r",
											"        } catch (e) {\r",
											"            console.error(e);\r",
											"        } finally {\r",
											"            clearInterval(interval);\r",
											"        }\r",
											"    },  \r",
											"    100 \r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Ответ должен содержать код статуса 204\", function () {\r",
											"    pm.response.to.have.status(204);\r",
											"});\r",
											"\r",
											"let source = pm.collectionVariables.get('response');\r",
											"\r",
											"pm.test(\"Локация должна быть найдена до удаления\", function () {\r",
											"    pm.expect(source).not.to.be.null;\r",
											"});\r",
											"\r",
											"let body\r",
											"const req = {\r",
											"                url: \"http://localhost:8080/admin/locations/all\",\r",
											"                method: \"GET\",\r",
											"                body: body == null ? \"\" : JSON.stringify(body),\r",
											"                header: { \"Content-Type\": \"application/json\" },\r",
											"            };\r",
											"pm.sendRequest(req, (error, response) => {\r",
											"    pm.test(\"Локация должна быть удалена после выполнения запроса\", function(){\r",
											"        response.json().forEach(element => {\r",
											"            if(element.id == pm.collectionVariables.get('locId')){\r",
											"                throw new Error(\"Локация все еще находится в списке существующих\");\r",
											"            }\r",
											"        })\r",
											"    });\r",
											"})"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/users/:userId/locations/:locId",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"users",
										":userId",
										"locations",
										":locId"
									],
									"variable": [
										{
											"key": "userId",
											"value": "{{userId}}"
										},
										{
											"key": "locId",
											"value": "{{locId}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Validation",
			"item": [
				{
					"name": "Удаление локации c созданным событием",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUserRussia());\r",
									"        const category = await api.addCategory(rnd.getCategory());\r",
									"        const location = await api.addAdminLocation(rnd.getLocation(50.835401, 40.584477, 1));\r",
									"        await api.addEvent(user.id, rnd.getEvent(category.id, location));\r",
									"        pm.collectionVariables.set(\"response\", location)\r",
									"        pm.collectionVariables.set(\"locId\", location.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/locations/:locId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								":locId"
							],
							"variable": [
								{
									"key": "locId",
									"value": "{{locId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление существующей локации",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let location;\r",
									"    try {\r",
									"        location = await api.addAdminLocation(rnd.getLocation(56.356519, 44.064573, 10));\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(location),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.error;    \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/admin/locations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations"
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить несуществующую локацию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"\r",
									"    try {\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.notFound;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/admin/locations/:locId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"admin",
								"locations",
								":locId"
							],
							"variable": [
								{
									"key": "locId",
									"value": "1001"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Добавление локации вне России",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    let location;\r",
									"    try {\r",
									"        const user = await api.addUser(rnd.getUserRussia());\r",
									"        location = rnd.getLocation(37.469782, 69.619450, 3);\r",
									"        pm.collectionVariables.set(\"response\", location)\r",
									"        pm.collectionVariables.set(\"userId\", user.id)\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"\r",
									"    pm.request.body.update({\r",
									"        mode: 'raw',\r",
									"        raw: JSON.stringify(location),\r",
									"        options: { raw: { language: 'json' } }\r",
									"    });\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function () {\r",
									"    pm.response.to.be.badRequest;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{{request_body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/users/:userId/locations",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"locations"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Получить по ID чужую локацию",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const main = async () => {\r",
									"    const api = new API(pm);\r",
									"    const rnd = new RandomUtils();\r",
									"\r",
									"    try {\r",
									"        const user1 = await api.addUser(rnd.getUserRussia());\r",
									"        const user2 = await api.addUser(rnd.getUserRussia());\r",
									"        const location = await api.addLocation(user1.id, rnd.getLocation(54.721473, 72.715106, 2));\r",
									"        pm.collectionVariables.set(\"response\", location);\r",
									"        pm.collectionVariables.set(\"userId\", user2.id);\r",
									"        pm.collectionVariables.set(\"locId\", location.id);\r",
									"    } catch(err) {\r",
									"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
									"    }\r",
									"};\r",
									"\r",
									"const interval = setInterval(() => {}, 1000);\r",
									"\r",
									"setTimeout(async () => \r",
									"    {\r",
									"        try {\r",
									"            await main();\r",
									"        } catch (e) {\r",
									"            console.error(e);\r",
									"        } finally {\r",
									"            clearInterval(interval);\r",
									"        }\r",
									"    },  \r",
									"    100 \r",
									");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function () {\r",
									"    pm.response.to.be.error;   \r",
									"    pm.response.to.be.withBody;\r",
									"    pm.response.to.be.json;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/users/:userId/locations/:locId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"users",
								":userId",
								"locations",
								":locId"
							],
							"variable": [
								{
									"key": "userId",
									"value": "{{userId}}"
								},
								{
									"key": "locId",
									"value": "{{locId}}"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"API = class {\r",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {\r",
					"        this.baseUrl = baseUrl;\r",
					"        this.pm = postman;\r",
					"        this._verbose = verbose;\r",
					"    }\r",
					"\r",
					"    async addUser(user, verbose=null) {\r",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addAdminLocation(location, verbose=null) {\r",
					"        return this.post(\"/admin/locations\", location, \"Ошибка при добавлении новой локации: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addLocation(userId, location, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/locations\", location, \"Ошибка при добавлении новой локации: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addCategory(category, verbose=null) {\r",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);\r",
					"    }\r",
					"\r",
					"    async addEvent(userId, event, verbose=null) {\r",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);\r",
					"    }\r",
					"\r",
					"    async findCategory(catId, verbose=null) {\r",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findEvent(eventId, verbose=null) {\r",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findLocation(locId, verbose=null) {\r",
					"        return this.get('/admin/locations' + locId, null, \"Ошибка при поиске события по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async findUser(userId, verbose=null) {\r",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);\r",
					"    }\r",
					"\r",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);\r",
					"    }\r",
					"\r",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {\r",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);\r",
					"    }\r",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {\r",
					"        return new Promise((resolve, reject) => {\r",
					"            verbose = verbose == null ? this._verbose : verbose;\r",
					"            const request = {\r",
					"                url: this.baseUrl + path,\r",
					"                method: method,\r",
					"                body: body == null ? \"\" : JSON.stringify(body),\r",
					"                header: { \"Content-Type\": \"application/json\" },\r",
					"            };\r",
					"            if(verbose) {\r",
					"                console.log(\"Отправляю запрос: \", request);\r",
					"            }\r",
					"\r",
					"            try {\r",
					"                this.pm.sendRequest(request, (error, response) => {\r",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {\r",
					"                        let err = error ? error : JSON.stringify(response.json());\r",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,\r",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + \r",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));\r",
					"\r",
					"                        reject(new Error(errorText + err));\r",
					"                    }\r",
					"                    if(verbose) {\r",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());\r",
					"                    }\r",
					"                    if (response.stream.length === 0){\r",
					"                        reject(new Error('Отправлено пустое тело ответа'))\r",
					"                    }else{\r",
					"                        resolve(response.json());\r",
					"                    }\r",
					"                });\r",
					"                \r",
					"            } catch(err) {\r",
					"                if(verbose) {\r",
					"                    console.error(errorText, err);\r",
					"                }\r",
					"                return Promise.reject(err);\r",
					"            }\r",
					"        });\r",
					"    }\r",
					"};\r",
					"\r",
					"RandomUtils = class {\r",
					"\r",
					"    constructor() {}\r",
					"\r",
					"    getUser() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}'),\r",
					"            country: null\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getUserRussia() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}'),\r",
					"            country: pm.variables.replaceIn('Россия')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getUserSweden() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),\r",
					"            email: pm.variables.replaceIn('{{$randomEmail}}'),\r",
					"            country: pm.variables.replaceIn('Швеция')\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getCategory() {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 10000 * Math.random()).toString()\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getLocation(lat, lot, radius) {\r",
					"        return {\r",
					"            name: pm.variables.replaceIn('{{$randomWord}}'),\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            lat: lat,\r",
					"            lon: lot,\r",
					"            radius: radius\r",
					"        };\r",
					"    }\r",
					"\r",
					"    getEvent(categoryId, location) {\r",
					"        return {\r",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),\r",
					"            category: categoryId,\r",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),\r",
					"            eventDate: this.getFutureDateTime(),\r",
					"            location: location,\r",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),\r",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),\r",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),\r",
					"        }\r",
					"    }\r",
					"\r",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {\r",
					"        let moment = require('moment');\r",
					"\r",
					"        let m = moment();\r",
					"        m.add(hourShift, 'hour');\r",
					"        m.add(minuteShift, 'minute');\r",
					"        m.add(yearShift, 'year');\r",
					"\r",
					"        return m.format('YYYY-MM-DD HH:mm:ss');\r",
					"    }\r",
					"}\r",
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "{{locId}}",
			"value": "1",
			"type": "string"
		},
		{
			"key": "response",
			"value": ""
		},
		{
			"key": "locationId",
			"value": ""
		},
		{
			"key": "locId",
			"value": ""
		},
		{
			"key": "{{userId}}",
			"value": "1"
		},
		{
			"key": "userId",
			"value": ""
		}
	]
}